exports.parser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */

  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};

      function padLeft(input, padding, length) {
        var result = input;

        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }

        return result;
      }

      function escape(ch) {
        var charCode = ch.charCodeAt(0);

        if (charCode < 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }

        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }

      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }

      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }

        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }

        rightmostMatchFailuresExpected.push(failure);
      }

      function parse_start() {
        var cacheKey = "start" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result0 = [];
        var result5 = parse_VALUE();
        if (result5 !== null) {
          var result1 = result5;
        } else {
          var result4 = parse_COMMAND();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_BLOCK();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_TEXT();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result5 = parse_VALUE();
          if (result5 !== null) {
            var result1 = result5;
          } else {
            var result4 = parse_COMMAND();
            if (result4 !== null) {
              var result1 = result4;
            } else {
              var result3 = parse_BLOCK();
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result2 = parse_TEXT();
                if (result2 !== null) {
                  var result1 = result2;
                } else {
                  var result1 = null;;
                };
              };
            };
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TEXT() {
        var cacheKey = "TEXT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_TEXT_INNER();
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var result2 = parse_TEXT_INNER();
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(body) { return ["text", body.join("")]})(result1)
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_TEXT_INNER() {
        var cacheKey = "TEXT_INNER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar1 = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_BLOCK_START();
        reportMatchFailures = savedReportMatchFailuresVar1;
        if (result6 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos2;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_VALUE_START();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            if (input.length > pos) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {return c})(result1[2])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VALUE() {
        var cacheKey = "VALUE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_VALUE_START();
        if (result2 !== null) {
          var result5 = parse_VALUE_INNER();
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              var result5 = parse_VALUE_INNER();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_VALUE_END();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(inner) { return ["value", inner.join("")]})(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VALUE_START() {
        var cacheKey = "VALUE_START" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "${") {
          var result0 = "${";
          pos += 2;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"${\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VALUE_END() {
        var cacheKey = "VALUE_END" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 1) === "}") {
          var result0 = "}";
          pos += 1;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"}\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_VALUE_INNER() {
        var cacheKey = "VALUE_INNER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result9 = parse_OBJECT();
        var result8 = result9 !== null
          ? (function(body) { return body})(result9)
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_EMPTY_OBJECT();
          var result6 = result7 !== null
            ? (function(body) { return body})(result7)
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result5 = parse_VALUE_END();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result3 = '';
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            if (result3 !== null) {
              if (input.length > pos) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(body) { return body})(result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_COMMAND() {
        var cacheKey = "COMMAND" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var result13 = parse_BLOCK_START();
        if (result13 !== null) {
          var result14 = parse__();
          if (result14 !== null) {
            var result15 = parse_COMMANDS();
            if (result15 !== null) {
              var result16 = parse__();
              if (result16 !== null) {
                var result17 = parse_BLOCK_END();
                if (result17 !== null) {
                  var result12 = [result13, result14, result15, result16, result17];
                } else {
                  var result12 = null;
                  pos = savedPos1;
                }
              } else {
                var result12 = null;
                pos = savedPos1;
              }
            } else {
              var result12 = null;
              pos = savedPos1;
            }
          } else {
            var result12 = null;
            pos = savedPos1;
          }
        } else {
          var result12 = null;
          pos = savedPos1;
        }
        var result11 = result12 !== null
          ? (function(command) { return [command, ""]})(result12[2])
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var result3 = parse_BLOCK_START();
          if (result3 !== null) {
            var result4 = parse__();
            if (result4 !== null) {
              var result5 = parse_COMMANDS();
              if (result5 !== null) {
                var result6 = parse__();
                if (result6 !== null) {
                  var result10 = parse_COMMAND_INNER();
                  if (result10 !== null) {
                    var result7 = [];
                    while (result10 !== null) {
                      result7.push(result10);
                      var result10 = parse_COMMAND_INNER();
                    }
                  } else {
                    var result7 = null;
                  }
                  if (result7 !== null) {
                    var result8 = parse__();
                    if (result8 !== null) {
                      var result9 = parse_BLOCK_END();
                      if (result9 !== null) {
                        var result2 = [result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(command, body) { return [command, body.join("")]})(result2[2], result2[4])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_COMMAND_INNER() {
        var cacheKey = "COMMAND_INNER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result9 = parse_OBJECT();
        var result8 = result9 !== null
          ? (function(body) { return body})(result9)
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_EMPTY_OBJECT();
          var result6 = result7 !== null
            ? (function(body) { return body})(result7)
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result5 = parse_BLOCK_END();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result3 = '';
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            if (result3 !== null) {
              if (input.length > pos) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(body) { return body})(result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_COMMANDS() {
        var cacheKey = "COMMANDS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 4) === "tmpl") {
          var result3 = "tmpl";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"tmpl\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 4) === "html") {
            var result2 = "html";
            pos += 4;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"html\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result1 = "=";
              pos += 1;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLOCK() {
        var cacheKey = "BLOCK" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BLOCK_OPEN();
        if (result2 !== null) {
          var result9 = parse_BLOCK_INNER();
          if (result9 !== null) {
            var result8 = [];
            while (result9 !== null) {
              result8.push(result9);
              var result9 = parse_BLOCK_INNER();
            }
          } else {
            var result8 = null;
          }
          var result3 = result8 !== null ? result8 : '';
          if (result3 !== null) {
            var result7 = parse_ELSE_BLOCK();
            if (result7 !== null) {
              var result6 = [];
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_ELSE_BLOCK();
              }
            } else {
              var result6 = null;
            }
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              var result5 = parse_BLOCK_CLOSE();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(open, inner, else_b, close) {
                if(open.command == close){
                  if(open.command == "if"){
                    return [open.command, open.body.join(""), inner, else_b];
                  } else {
                    return [open.command, open.body.join(""), inner];
                  }
                } else {
                  var errorPosition = computeErrorPosition();
                  throw new this.SyntaxError(
                    "No closing tag found for "+head.command,
                    errorPosition.line,
                    errorPosition.column
                  );
                }
              })(result1[0], result1[1], result1[2], result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLOCK_START() {
        var cacheKey = "BLOCK_START" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "{{") {
          var result0 = "{{";
          pos += 2;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"{{\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLOCK_END() {
        var cacheKey = "BLOCK_END" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "}}") {
          var result0 = "}}";
          pos += 2;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"}}\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLOCK_OPEN() {
        var cacheKey = "BLOCK_OPEN" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BLOCK_START();
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var result4 = parse_BLOCK_COMMANDS();
            if (result4 !== null) {
              var result5 = parse__();
              if (result5 !== null) {
                var result9 = parse_COMMAND_INNER();
                if (result9 !== null) {
                  var result6 = [];
                  while (result9 !== null) {
                    result6.push(result9);
                    var result9 = parse_COMMAND_INNER();
                  }
                } else {
                  var result6 = null;
                }
                if (result6 !== null) {
                  var result7 = parse__();
                  if (result7 !== null) {
                    var result8 = parse_BLOCK_END();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(command, body) { return {command:command, body:body}})(result1[2], result1[4])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLOCK_CLOSE() {
        var cacheKey = "BLOCK_CLOSE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_BLOCK_START();
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "/") {
              var result4 = "/";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_BLOCK_COMMANDS();
              if (result5 !== null) {
                var result6 = parse__();
                if (result6 !== null) {
                  var result7 = parse_BLOCK_END();
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(tail) { return tail })(result1[3])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLOCK_INNER() {
        var cacheKey = "BLOCK_INNER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result11 = parse_BLOCK();
        var result10 = result11 !== null
          ? (function(body) { return body})(result11)
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var result9 = parse_COMMAND();
          var result8 = result9 !== null
            ? (function(body) { return body})(result9)
            : null;
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_VALUE();
            var result6 = result7 !== null
              ? (function(body) { return body})(result7)
              : null;
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result5 = parse_BLOCK_START();
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result5 === null) {
                var result3 = '';
              } else {
                var result3 = null;
                pos = savedPos1;
              }
              if (result3 !== null) {
                var result4 = parse_TEXT();
                if (result4 !== null) {
                  var result2 = [result3, result4];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              var result1 = result2 !== null
                ? (function(body) { return body})(result2[1])
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_BLOCK_COMMANDS() {
        var cacheKey = "BLOCK_COMMANDS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result2 = parse_COMMAND_EACH();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_COMMAND_IF();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_COMMAND_IF() {
        var cacheKey = "COMMAND_IF" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 2) === "if") {
          var result0 = "if";
          pos += 2;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_COMMAND_EACH() {
        var cacheKey = "COMMAND_EACH" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 4) === "each") {
          var result0 = "each";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"each\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_COMMAND_ELSE() {
        var cacheKey = "COMMAND_ELSE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos, 4) === "else") {
          var result0 = "else";
          pos += 4;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"else\"");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ELSE_BLOCK() {
        var cacheKey = "ELSE_BLOCK" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result2 = parse_ELSE_BLOCK_OPEN();
        if (result2 !== null) {
          var result5 = parse_BLOCK_INNER();
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              var result5 = parse_BLOCK_INNER();
            }
          } else {
            var result4 = null;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(expression, inner) { return ["else", expression, inner] })(result1[0], result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ELSE_BLOCK_OPEN() {
        var cacheKey = "ELSE_BLOCK_OPEN" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos1 = pos;
        var result13 = parse_BLOCK_START();
        if (result13 !== null) {
          var result14 = parse__();
          if (result14 !== null) {
            var result15 = parse_COMMAND_ELSE();
            if (result15 !== null) {
              var result16 = parse__();
              if (result16 !== null) {
                var result17 = parse_BLOCK_END();
                if (result17 !== null) {
                  var result12 = [result13, result14, result15, result16, result17];
                } else {
                  var result12 = null;
                  pos = savedPos1;
                }
              } else {
                var result12 = null;
                pos = savedPos1;
              }
            } else {
              var result12 = null;
              pos = savedPos1;
            }
          } else {
            var result12 = null;
            pos = savedPos1;
          }
        } else {
          var result12 = null;
          pos = savedPos1;
        }
        var result11 = result12 !== null
          ? (function() { return "true"})()
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var result3 = parse_BLOCK_START();
          if (result3 !== null) {
            var result4 = parse__();
            if (result4 !== null) {
              var result5 = parse_COMMAND_ELSE();
              if (result5 !== null) {
                var result6 = parse__();
                if (result6 !== null) {
                  var result10 = parse_COMMAND_INNER();
                  if (result10 !== null) {
                    var result7 = [];
                    while (result10 !== null) {
                      result7.push(result10);
                      var result10 = parse_COMMAND_INNER();
                    }
                  } else {
                    var result7 = null;
                  }
                  if (result7 !== null) {
                    var result8 = parse__();
                    if (result8 !== null) {
                      var result9 = parse_BLOCK_END();
                      if (result9 !== null) {
                        var result2 = [result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(expression) { return expression.join("")})(result2[4])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_ELSE_BLOCK_CLOSE() {
        var cacheKey = "ELSE_BLOCK_CLOSE" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        var result1 = parse_BLOCK_START();
        if (result1 !== null) {
          var result2 = parse__();
          if (result2 !== null) {
            if (input.substr(pos, 1) === "/") {
              var result3 = "/";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result3 !== null) {
              var result4 = parse_COMMAND_IF();
              if (result4 !== null) {
                var result5 = parse__();
                if (result5 !== null) {
                  var result6 = parse_BLOCK_END();
                  if (result6 !== null) {
                    var result0 = [result1, result2, result3, result4, result5, result6];
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_EMPTY_OBJECT() {
        var cacheKey = "EMPTY_OBJECT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result5 = parse__();
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            if (input.substr(pos, 1) === "}") {
              var result4 = "}";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"}\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(body) { return "{" + body.join("") + "}"})(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_OBJECT() {
        var cacheKey = "OBJECT" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result5 = parse_OBJECT_INNER();
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              var result5 = parse_OBJECT_INNER();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "}") {
              var result4 = "}";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"}\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(body) { return "{"+ body.join("") +"}"})(result1[1])
          : null;



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_OBJECT_INNER() {
        var cacheKey = "OBJECT_INNER" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        var result8 = parse_EMPTY_OBJECT();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_OBJECT();
          if (result7 !== null) {
            var result6 = [];
            while (result7 !== null) {
              result6.push(result7);
              var result7 = parse_OBJECT();
            }
          } else {
            var result6 = null;
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "}") {
              var result5 = "}";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"}\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result3 = '';
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            if (result3 !== null) {
              if (input.length > pos) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(body) {return body})(result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse__() {
        var cacheKey = "_" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }

        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result0 = [];
        var result1 = parse_whitespace();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_whitespace();
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }

        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function parse_whitespace() {
        var cacheKey = "whitespace" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }


        if (input.substr(pos).match(/^[   \n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[   \\n\\r]");
          }
        }



        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }

      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();

          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }

          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }

        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';

        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }

      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */

        var line = 1;
        var column = 1;
        var seenCR = false;

        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }

        return { line: line, column: column };
      }



      var result = parse_start();

      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }

      return result;
    },

    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };

  /* Thrown when a parser encounters a syntax error. */

  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };

  result.SyntaxError.prototype = Error.prototype;

  return result;
})();
